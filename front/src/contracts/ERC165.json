{
<<<<<<< HEAD
	"contractName": "ERC165",
	"abi": [
		{
			"inputs": [
				{
					"internalType": "bytes4",
					"name": "interfaceId",
					"type": "bytes4"
				}
			],
			"name": "supportsInterface",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		}
	],
	"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0x3d3fe7b1901114d50828f5c77ba7f09a2a6a65223620c837364d31b60e5982ac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6751cee12592cb9c33be618057660d6c84cb0594bd0afa552009438e38d3dd02\",\"dweb:/ipfs/QmWq8SxNw4q6n1B8i9sFZVaodB6wrcyBPsKPWMsaUyCECH\"]},\"project:/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x540685d7ece3faa56f38253270ff11b18e63949fb8659c408123b1874674492e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5474839e19e2571c52eae3aab1dc6e6edf2b20bbba9895f59db6594a2678a3d5\",\"dweb:/ipfs/QmVHocBeANMkq4TzVM7q9At5NSg1TEpT9D9vgJ5dGcvcPN\"]}},\"version\":1}",
	"bytecode": "0x",
	"deployedBytecode": "0x",
	"immutableReferences": {},
	"generatedSources": [],
	"deployedGeneratedSources": [],
	"sourceMap": "",
	"deployedSourceMap": "",
	"source": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC165.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n",
	"sourcePath": "C:\\Users\\KGA_030\\Desktop\\class\\NFT_market\\smartContract\\@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol",
	"ast": {
		"absolutePath": "project:/@openzeppelin/contracts/utils/introspection/ERC165.sol",
		"exportedSymbols": {
			"ERC165": [2844],
			"IERC165": [2856]
		},
		"id": 2845,
		"license": "MIT",
		"nodeType": "SourceUnit",
		"nodes": [
			{
				"id": 2822,
				"literals": ["solidity", "^", "0.8", ".0"],
				"nodeType": "PragmaDirective",
				"src": "102:23:13"
			},
			{
				"absolutePath": "project:/@openzeppelin/contracts/utils/introspection/IERC165.sol",
				"file": "./IERC165.sol",
				"id": 2823,
				"nameLocation": "-1:-1:-1",
				"nodeType": "ImportDirective",
				"scope": 2845,
				"sourceUnit": 2857,
				"src": "129:23:13",
				"symbolAliases": [],
				"unitAlias": ""
			},
			{
				"abstract": true,
				"baseContracts": [
					{
						"baseName": {
							"id": 2825,
							"name": "IERC165",
							"nameLocations": ["775:7:13"],
							"nodeType": "IdentifierPath",
							"referencedDeclaration": 2856,
							"src": "775:7:13"
						},
						"id": 2826,
						"nodeType": "InheritanceSpecifier",
						"src": "775:7:13"
					}
				],
				"canonicalName": "ERC165",
				"contractDependencies": [],
				"contractKind": "contract",
				"documentation": {
					"id": 2824,
					"nodeType": "StructuredDocumentation",
					"src": "156:589:13",
					"text": " @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."
				},
				"fullyImplemented": true,
				"id": 2844,
				"linearizedBaseContracts": [2844, 2856],
				"name": "ERC165",
				"nameLocation": "765:6:13",
				"nodeType": "ContractDefinition",
				"nodes": [
					{
						"baseFunctions": [2855],
						"body": {
							"id": 2842,
							"nodeType": "Block",
							"src": "945:66:13",
							"statements": [
								{
									"expression": {
										"commonType": {
											"typeIdentifier": "t_bytes4",
											"typeString": "bytes4"
										},
										"id": 2840,
										"isConstant": false,
										"isLValue": false,
										"isPure": false,
										"lValueRequested": false,
										"leftExpression": {
											"id": 2835,
											"name": "interfaceId",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 2829,
											"src": "963:11:13",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes4",
												"typeString": "bytes4"
											}
										},
										"nodeType": "BinaryOperation",
										"operator": "==",
										"rightExpression": {
											"expression": {
												"arguments": [
													{
														"id": 2837,
														"name": "IERC165",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2856,
														"src": "983:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_contract$_IERC165_$2856_$",
															"typeString": "type(contract IERC165)"
														}
													}
												],
												"expression": {
													"argumentTypes": [
														{
															"typeIdentifier": "t_type$_t_contract$_IERC165_$2856_$",
															"typeString": "type(contract IERC165)"
														}
													],
													"id": 2836,
													"name": "type",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 4294967269,
													"src": "978:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
														"typeString": "function () pure"
													}
												},
												"id": 2838,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "functionCall",
												"lValueRequested": false,
												"nameLocations": [],
												"names": [],
												"nodeType": "FunctionCall",
												"src": "978:13:13",
												"tryCall": false,
												"typeDescriptions": {
													"typeIdentifier": "t_magic_meta_type_t_contract$_IERC165_$2856",
													"typeString": "type(contract IERC165)"
												}
											},
											"id": 2839,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"memberLocation": "992:11:13",
											"memberName": "interfaceId",
											"nodeType": "MemberAccess",
											"src": "978:25:13",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes4",
												"typeString": "bytes4"
											}
										},
										"src": "963:40:13",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"functionReturnParameters": 2834,
									"id": 2841,
									"nodeType": "Return",
									"src": "956:47:13"
								}
							]
						},
						"documentation": {
							"id": 2827,
							"nodeType": "StructuredDocumentation",
							"src": "790:58:13",
							"text": " @dev See {IERC165-supportsInterface}."
						},
						"functionSelector": "01ffc9a7",
						"id": 2843,
						"implemented": true,
						"kind": "function",
						"modifiers": [],
						"name": "supportsInterface",
						"nameLocation": "863:17:13",
						"nodeType": "FunctionDefinition",
						"overrides": {
							"id": 2831,
							"nodeType": "OverrideSpecifier",
							"overrides": [],
							"src": "921:8:13"
						},
						"parameters": {
							"id": 2830,
							"nodeType": "ParameterList",
							"parameters": [
								{
									"constant": false,
									"id": 2829,
									"mutability": "mutable",
									"name": "interfaceId",
									"nameLocation": "888:11:13",
									"nodeType": "VariableDeclaration",
									"scope": 2843,
									"src": "881:18:13",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes4",
										"typeString": "bytes4"
									},
									"typeName": {
										"id": 2828,
										"name": "bytes4",
										"nodeType": "ElementaryTypeName",
										"src": "881:6:13",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes4",
											"typeString": "bytes4"
										}
									},
									"visibility": "internal"
								}
							],
							"src": "880:20:13"
						},
						"returnParameters": {
							"id": 2834,
							"nodeType": "ParameterList",
							"parameters": [
								{
									"constant": false,
									"id": 2833,
									"mutability": "mutable",
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "VariableDeclaration",
									"scope": 2843,
									"src": "939:4:13",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 2832,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "939:4:13",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "internal"
								}
							],
							"src": "938:6:13"
						},
						"scope": 2844,
						"src": "854:157:13",
						"stateMutability": "view",
						"virtual": true,
						"visibility": "public"
					}
				],
				"scope": 2845,
				"src": "747:267:13",
				"usedErrors": []
			}
		],
		"src": "102:914:13"
	},
	"compiler": {
		"name": "solc",
		"version": "0.8.17+commit.8df45f5f.Emscripten.clang"
	},
	"networks": {},
	"schemaVersion": "3.4.11",
	"updatedAt": "2022-12-22T03:38:21.503Z",
	"devdoc": {
		"details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.",
		"kind": "dev",
		"methods": {
			"supportsInterface(bytes4)": {
				"details": "See {IERC165-supportsInterface}."
			}
		},
		"version": 1
	},
	"userdoc": {
		"kind": "user",
		"methods": {},
		"version": 1
	}
}
=======
  "contractName": "ERC165",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0x3d3fe7b1901114d50828f5c77ba7f09a2a6a65223620c837364d31b60e5982ac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6751cee12592cb9c33be618057660d6c84cb0594bd0afa552009438e38d3dd02\",\"dweb:/ipfs/QmWq8SxNw4q6n1B8i9sFZVaodB6wrcyBPsKPWMsaUyCECH\"]},\"project:/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x540685d7ece3faa56f38253270ff11b18e63949fb8659c408123b1874674492e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5474839e19e2571c52eae3aab1dc6e6edf2b20bbba9895f59db6594a2678a3d5\",\"dweb:/ipfs/QmVHocBeANMkq4TzVM7q9At5NSg1TEpT9D9vgJ5dGcvcPN\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC165.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n",
  "sourcePath": "C:\\Users\\KGA_030\\Desktop\\class\\NFT_market\\smartContract\\@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol",
  "ast": {
    "absolutePath": "project:/@openzeppelin/contracts/utils/introspection/ERC165.sol",
    "exportedSymbols": {
      "ERC165": [
        2844
      ],
      "IERC165": [
        2856
      ]
    },
    "id": 2845,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2822,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "102:23:13"
      },
      {
        "absolutePath": "project:/@openzeppelin/contracts/utils/introspection/IERC165.sol",
        "file": "./IERC165.sol",
        "id": 2823,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 2845,
        "sourceUnit": 2857,
        "src": "129:23:13",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 2825,
              "name": "IERC165",
              "nameLocations": [
                "775:7:13"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2856,
              "src": "775:7:13"
            },
            "id": 2826,
            "nodeType": "InheritanceSpecifier",
            "src": "775:7:13"
          }
        ],
        "canonicalName": "ERC165",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 2824,
          "nodeType": "StructuredDocumentation",
          "src": "156:589:13",
          "text": " @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."
        },
        "fullyImplemented": true,
        "id": 2844,
        "linearizedBaseContracts": [
          2844,
          2856
        ],
        "name": "ERC165",
        "nameLocation": "765:6:13",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "baseFunctions": [
              2855
            ],
            "body": {
              "id": 2842,
              "nodeType": "Block",
              "src": "945:66:13",
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    },
                    "id": 2840,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 2835,
                      "name": "interfaceId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2829,
                      "src": "963:11:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "expression": {
                        "arguments": [
                          {
                            "id": 2837,
                            "name": "IERC165",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2856,
                            "src": "983:7:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_IERC165_$2856_$",
                              "typeString": "type(contract IERC165)"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_type$_t_contract$_IERC165_$2856_$",
                              "typeString": "type(contract IERC165)"
                            }
                          ],
                          "id": 2836,
                          "name": "type",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4294967269,
                          "src": "978:4:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                            "typeString": "function () pure"
                          }
                        },
                        "id": 2838,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "978:13:13",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_meta_type_t_contract$_IERC165_$2856",
                          "typeString": "type(contract IERC165)"
                        }
                      },
                      "id": 2839,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberLocation": "992:11:13",
                      "memberName": "interfaceId",
                      "nodeType": "MemberAccess",
                      "src": "978:25:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      }
                    },
                    "src": "963:40:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 2834,
                  "id": 2841,
                  "nodeType": "Return",
                  "src": "956:47:13"
                }
              ]
            },
            "documentation": {
              "id": 2827,
              "nodeType": "StructuredDocumentation",
              "src": "790:58:13",
              "text": " @dev See {IERC165-supportsInterface}."
            },
            "functionSelector": "01ffc9a7",
            "id": 2843,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "supportsInterface",
            "nameLocation": "863:17:13",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 2831,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "921:8:13"
            },
            "parameters": {
              "id": 2830,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2829,
                  "mutability": "mutable",
                  "name": "interfaceId",
                  "nameLocation": "888:11:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 2843,
                  "src": "881:18:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 2828,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "881:6:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "880:20:13"
            },
            "returnParameters": {
              "id": 2834,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2833,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2843,
                  "src": "939:4:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 2832,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "939:4:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "938:6:13"
            },
            "scope": 2844,
            "src": "854:157:13",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          }
        ],
        "scope": 2845,
        "src": "747:267:13",
        "usedErrors": []
      }
    ],
    "src": "102:914:13"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.17+commit.8df45f5f.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.11",
  "updatedAt": "2022-12-22T03:38:21.503Z",
  "devdoc": {
    "details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.",
    "kind": "dev",
    "methods": {
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}
>>>>>>> d6624ca25abde025abd403a30d6123cf8e05f749
